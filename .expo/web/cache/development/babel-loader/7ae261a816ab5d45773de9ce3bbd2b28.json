{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\Professionnel\\\\Formation\\\\3wacademy\\\\react\\\\reactnative\\\\drivev1\\\\api_front\\\\helpers\\\\require-auth.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport Routes from \"../navigation/routes\";\nimport RoutesLog from \"../navigation/routes-log\";\nimport axios from 'axios';\nimport { config } from \"../config\";\nimport { connect } from 'react-redux';\nimport { connectUser } from \"../actions/user/userAction\";\n\nvar RequireAuth = function RequireAuth(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLogged = _useState2[0],\n      setIsLogged = _useState2[1];\n\n  useEffect(function () {\n    retrieveData();\n  }, []);\n  useEffect(function () {\n    if (props.user.isLogged) {\n      setIsLogged(true);\n    } else {\n      setIsLogged(false);\n    }\n  }, [props.user]);\n\n  var retrieveData = function retrieveData() {\n    var token;\n    return _regeneratorRuntime.async(function retrieveData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('driveKey'));\n\n          case 2:\n            token = _context.sent;\n            console.log('TOKEN =', token);\n\n            try {\n              if (token === null) {\n                setIsLogged(false);\n              } else {\n                axios.get(config.api_url + \"/api/v1/checkToken\", {\n                  headers: {\n                    \"x-access-token\": token\n                  }\n                }).then(function (response) {\n                  console.log(response.data);\n\n                  if (response.data.status !== 200) {\n                    setIsLogged(false);\n                  } else {\n                    setIsLogged(true);\n                    var user = response.data.user[0];\n                    user.token = token;\n                    props.connectUser(user);\n                  }\n                });\n              }\n            } catch (error) {\n              console.log(\"erreur: \", error);\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, isLogged ? React.createElement(RoutesLog, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }) : React.createElement(Routes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 40\n    }\n  }));\n};\n\nmapDispatchToProps = {\n  connectUser: connectUser\n};\n\nmapStateToProps = function mapStateToProps(store) {\n  return {\n    user: store.user\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RequireAuth);","map":{"version":3,"sources":["F:/Professionnel/Formation/3wacademy/react/reactnative/drivev1/api_front/helpers/require-auth.js"],"names":["React","useState","useEffect","AsyncStorage","Routes","RoutesLog","axios","config","connect","connectUser","RequireAuth","props","isLogged","setIsLogged","retrieveData","user","getItem","token","console","log","get","api_url","headers","then","response","data","status","error","mapDispatchToProps","mapStateToProps","store"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;SACQC,Y;AACR,OAAOC,MAAP;AACA,OAAOC,SAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAS;AACzB,kBAAgCV,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOW,QAAP;AAAA,MAAiBC,WAAjB;;AAEAX,EAAAA,SAAS,CAAC,YAAI;AACVY,IAAAA,YAAY;AAEf,GAHQ,EAGN,EAHM,CAAT;AAIAZ,EAAAA,SAAS,CAAC,YAAI;AAGV,QAAGS,KAAK,CAACI,IAAN,CAAWH,QAAd,EAAwB;AACpBC,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH,KAFD,MAEO;AACHA,MAAAA,WAAW,CAAC,KAAD,CAAX;AACH;AAEJ,GATQ,EASN,CAACF,KAAK,CAACI,IAAP,CATM,CAAT;;AAWA,MAAMD,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEGX,YAAY,CAACa,OAAb,CAAqB,UAArB,CAFH;;AAAA;AAEXC,YAAAA,KAFW;AAGjBC,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB;;AAEA,gBAAI;AAEA,kBAAGA,KAAK,KAAK,IAAb,EAAmB;AACfJ,gBAAAA,WAAW,CAAC,KAAD,CAAX;AACH,eAFD,MAEO;AAEHP,gBAAAA,KAAK,CAACc,GAAN,CAAUb,MAAM,CAACc,OAAP,GAAe,oBAAzB,EAA+C;AAAEC,kBAAAA,OAAO,EAAE;AAAE,sCAAkBL;AAApB;AAAX,iBAA/C,EACCM,IADD,CACM,UAACC,QAAD,EAAY;AACdN,kBAAAA,OAAO,CAACC,GAAR,CAAYK,QAAQ,CAACC,IAArB;;AACA,sBAAGD,QAAQ,CAACC,IAAT,CAAcC,MAAd,KAAyB,GAA5B,EAAiC;AAE5Bb,oBAAAA,WAAW,CAAC,KAAD,CAAX;AACJ,mBAHD,MAGO;AACHA,oBAAAA,WAAW,CAAC,IAAD,CAAX;AACA,wBAAIE,IAAI,GAAGS,QAAQ,CAACC,IAAT,CAAcV,IAAd,CAAmB,CAAnB,CAAX;AACAA,oBAAAA,IAAI,CAACE,KAAL,GAAaA,KAAb;AACAN,oBAAAA,KAAK,CAACF,WAAN,CAAkBM,IAAlB;AACH;AACJ,iBAZD;AAaH;AACJ,aApBD,CAoBE,OAAOY,KAAP,EAAc;AACZT,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBQ,KAAxB;AACH;;AA3BgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AA+BA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKf,QAAQ,GAAG,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAkB,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD/B,CADJ;AAKH,CAtDD;;AA0DAgB,kBAAkB,GAAG;AACjBnB,EAAAA,WAAW,EAAXA;AADiB,CAArB;;AAIAoB,eAAe,GAAG,yBAACC,KAAD,EAAS;AACvB,SAAO;AACHf,IAAAA,IAAI,EAAEe,KAAK,CAACf;AADT,GAAP;AAGH,CAJD;;AAMA,eAAeP,OAAO,CAACqB,eAAD,EAAkBD,kBAAlB,CAAP,CAA6ClB,WAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {AsyncStorage } from 'react-native';\nimport Routes from '../navigation/routes';\nimport RoutesLog from '../navigation/routes-log';\nimport axios from 'axios';\nimport {config} from '../config';\nimport {connect} from 'react-redux';\nimport {connectUser} from '../actions/user/userAction';\n\n\nconst RequireAuth = (props)=>{\n    const [isLogged, setIsLogged] = useState(false);\n\n    useEffect(()=>{\n        retrieveData();\n       \n    }, [])\n    useEffect(()=>{\n        \n        //si il est connecté on met à jour le state isLogged à true sinon on le laisse à false\n        if(props.user.isLogged) {\n            setIsLogged(true);\n        } else {\n            setIsLogged(false);\n        }\n       \n    }, [props.user])\n    \n    const retrieveData = async ()=>{\n        //on récupère le token qui se situe dans notre storage\n        const token = await AsyncStorage.getItem('driveKey');\n        console.log('TOKEN =', token)\n        \n        try {\n            //si le token n'éxiste pas on met à jour la state de connexion à false\n            if(token === null) {\n                setIsLogged(false);\n            } else {\n                //sinon le token est trouvé\n                axios.get(config.api_url+\"/api/v1/checkToken\", { headers: { \"x-access-token\": token }})\n                .then((response)=>{\n                    console.log(response.data);\n                    if(response.data.status !== 200) {\n                        //si il y'a une erreur\n                         setIsLogged(false);\n                    } else {\n                        setIsLogged(true);\n                        let user = response.data.user[0];\n                        user.token = token;\n                        props.connectUser(user);\n                    }\n                })\n            }\n        } catch (error) {\n            console.log(\"erreur: \", error)\n        }\n        \n    }\n    //ici accès à des routes selon s'il est connecté ou non\n    return (\n        <React.Fragment>\n            {isLogged ? <RoutesLog/> : <Routes />}\n        </React.Fragment>\n    )\n}\n\n\n\nmapDispatchToProps = {\n    connectUser\n}\n\nmapStateToProps = (store)=>{\n    return {\n        user: store.user\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RequireAuth);"]},"metadata":{},"sourceType":"module"}